---
import i18next from "i18next";
import { localizePath } from "astro-i18next";
// import localeEmoji from "locale-emoji";
import ISO6991 from "iso-639-1";

let defaults = {
  es: 'ES',
  ca: 'ES-CT',
  en: 'GB',
  de: 'DE',
};

function localeEmoji(locale: string) {
  let split = locale.toUpperCase().split(/-|_/);
  let lang = split.shift();
  let code = split.pop();

  if (!/^[A-Z]{2}$/.test(code)) {
    code = defaults[lang.toLowerCase()];
  }

  if (!code) {
    return '';
  }

  const a = String.fromCodePoint(code.codePointAt(0) - 0x41 + 0x1F1E6);
  const b = String.fromCodePoint(code.codePointAt(1) - 0x41 + 0x1F1E6);
  return a + b;
};

interface languageMapping {
  [localeCode: string]: string;
}

export interface Props extends astroHTML.JSX.SelectHTMLAttributes {
  showFlag?: boolean;
  languageMapping?: languageMapping;
}

const supportedLanguages = i18next.languages;
const currentLanguage = i18next.language;

const { pathname } = Astro.url;

const { showFlag = false, languageMapping, ...attributes } = Astro.props;
---

<select onchange="location = this.value;" {...attributes}>
  {
    supportedLanguages.map((supportedLanguage: string) => {
      let value = localizePath(pathname, supportedLanguage);
      const flag = showFlag ? localeEmoji(supportedLanguage) + " " : "";

      let nativeName = "";
      if (
        languageMapping &&
        languageMapping.hasOwnProperty(supportedLanguage)
      ) {
        nativeName = languageMapping[supportedLanguage];
      } else {
        nativeName = ISO6991.getNativeName(supportedLanguage);
      }

      const label = flag + nativeName;

      return (
        <option value={value} selected={supportedLanguage === currentLanguage}>
          {label}
        </option>
      );
    })
  }
</select>
